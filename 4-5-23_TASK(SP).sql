ERROR HANDLING IN PROCEDURES
SQL 2000: @ERROR 
SQL 2005 : TRY/CATCH

RAISEERROR('',ERRORSEVERITY,ERRORSTATE)


CREATE TABLE TBLPRODUCT(
PRODUCTID INT PRIMARY KEY,
NAME VARCHAR(20),
QTYAVAILABLE INT,
UNITPRICE INT
)

CREATE TABLE TBLPRODUCTSALES(
PRODUCTSALESID INT PRIMARY KEY,
PRODUCTID INT,
QUANTITYSOLD INT
)

INSERT INTO TBLPRODUCT VALUES(1,'Laptops',2000,100)
INSERT INTO TBLPRODUCT VALUES(2,'Desktops',4000,50)

DROP TABLE TBLPRODUCTSALES
DELETE FROM TBLPRODUCT

select * from tblProduct;
select * from tblProductSales;

DELETE FROM TBLPRODUCTSALES

1 10 --> 100-10=90  (LAPTOPS)

ALTER PROCEDURE spSellProduct
@ProductId INT,
@QuantityToSell Int
AS 
BEGIN
DECLARE @STOCKAVAILABLE INT
SELECT @STOCKAVAILABLE=QTYAVAILABLE FROM 
TBLPRODUCT WHERE PRODUCTID=@ProductId

if(@StockAvailable<@QuantityToSell)
BEGIN
RAISERROR('Not enough stock available',16,1)
END
ELSE
BEGIN
BEGIN TRAN
UPDATE TBLPRODUCT
-- Reduced quantity available
SET QTYAVAILABLE=(QTYAVAILABLE-@QuantityToSell) where 
ProductId=@ProductId;
--Calculate Max ProductSalesId
DECLARE @MaxProductSalesId INT
SELECT @MaxProductSalesId=CASE WHEN MAX(PRODUCTSALESID) IS NULL THEN 0 
ELSE MAX(PRODUCTSALESID) END FROM TBLPRODUCTSALES
--INCREMENT BY 1
SET @MaxProductSalesId=@MaxProductSalesId+1

INSERT INTO TBLPRODUCTSALES VALUES(@MaxProductSalesId,@ProductId,@QuantityToSell);
IF(@@ERROR<>0)
BEGIN
ROLLBACK TRAN
PRINT 'TRANSACTION ROLLED BACK'
END
ELSE
BEGIN
COMMIT TRANSACTION
END
END
END


SPSELLPRODUCT 1,10
select * from tblProduct;
select * from tblProductSales;





--TRY/CATCH BLOCK
BEGIN TRY
SQL STATEMENTS
END TRY

BEGIN CATCH

ALTER PROCEDURE spSellProduct
@ProductId INT,
@QuantityToSell Int
AS 
BEGIN
DECLARE @STOCKAVAILABLE INT
SELECT @STOCKAVAILABLE=QTYAVAILABLE FROM 
TBLPRODUCT WHERE PRODUCTID=@ProductId

if(@StockAvailable<@QuantityToSell)
BEGIN
RAISERROR('Not enough stock available',16,1)
END
ELSE
BEGIN
BEGIN TRY
BEGIN TRAN
UPDATE TBLPRODUCT
-- Reduced quantity available
SET QTYAVAILABLE=(QTYAVAILABLE-@QuantityToSell) where 
ProductId=@ProductId;
--Calculate Max ProductSalesId
DECLARE @MaxProductSalesId INT
SELECT @MaxProductSalesId=CASE WHEN MAX(PRODUCTSALESID) IS NULL THEN 0 
ELSE MAX(PRODUCTSALESID) END FROM TBLPRODUCTSALES
--INCREMENT BY 1
--SET @MaxProductSalesId=@MaxProductSalesId+1

INSERT INTO TBLPRODUCTSALES VALUES(@MaxProductSalesId,@ProductId,@QuantityToSell);
COMMIT TRANSACTION
END TRY
BEGIN CATCH
ROLLBACK TRAN
SELECT ERROR_NUMBER(),ERROR_MESSAGE(),ERROR_PROCEDURE(),ERROR_LINE(),ERROR_SEVERITY(),ERROR_STATE()
END CATCH
END
END


SPSELLPRODUCT 1,200
select * from tblProduct;
select * from tblProductSales;
